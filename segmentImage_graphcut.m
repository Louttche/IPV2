function [BW,maskedImage] = segmentImage_graphcut(RGB)
%segmentImage Segment image using auto-generated code from imageSegmenter app
%  [BW,MASKEDIMAGE] = segmentImage(RGB) segments image RGB using
%  auto-generated code from the imageSegmenter app. The final segmentation
%  is returned in BW, and a masked image is returned in MASKEDIMAGE.

% Auto-generated by imageSegmenter app on 17-Nov-2021
%----------------------------------------------------


% Convert RGB image into L*a*b* color space.
X = rgb2lab(RGB);
gaborX = createGaborFeatures(X);

% Graph cut with texture
foregroundInd
backgroundInd = [16552 17272 18712 19432 20152 20871 22309 23747 26623 28782 29500 30219 31658 32377 32378 33050 33095 34490 34534 34535 35254 35970 35971 36687 38124 38126 38807 38841 39557 40992 41686 41705 42406 42414 42420 43370 43372 43375 43381 43385 43388 43392 43396 43398 43402 43406 43409 43411 43414 43417 43420 43423 43427 43432 43435 43439 43442 44074 44077 44079 44083 44086 44165 44166 44169 44562 44566 44790 44893 44897 45274 45499 45501 45506 45619 45622 45625 45988 46935 47068 47651 47791 47794 47796 48140 48364 48520 48852 48882 49799 49802 49967 50168 50170 50175 50179 50184 50188 50192 50196 50200 50203 50207 50210 50214 50217 50220 50226 50230 50233 50235 50239 50243 50247 50253 50257 50262 50266 50271 50277 50283 50517 50692 50693 50697 50881 51042 51233 51234 51420 51596 51634 52670 52863 52865 53024 53031 53100 53389 53390 53589 53591 53593 53739 54318 54319 54322 54324 54454 54517 55048 55167 56265 56491 56492 56495 56498 56501 56504 56509 56511 56514 56517 56521 56523 56526 56528 56531 56536 56540 56543 56545 56548 56550 56552 56554 56557 56558 56561 56563 56566 56569 56571 56574 56578 56580 56584 56588 56592 56604 57401 57425 57704 60581 61742 63180 63181 63182 63460 63797 63800 63804 63806 63814 63819 63823 63828 63837 63842 63850 63855 63861 63866 63871 63876 63880 63887 63889 63893 63894 63896 63897 63898 63911 64334 64339 64342 64345 64348 64355 64359 64363 64372 64376 64381 64385 64395 64400 64405 64409 64415 64418 64424 64428 64431 64435 64443 64447 64451 64457 64461 64465 64469 64472 64476 64479 64483 64490 64494 64498 64500 64503 64505 64508 64511 65769 65770 66050 66327 66328 66336 66337 66338 66346 66353 66359 66363 66366 66367 66383 66385 66388 66396 66403 66407 66415 66424 66433 66441 66449 66453 66460 66463 66466 66468 66471 66473 66476 66479 66482 67091 68543 70399 70655 71097 72128 73250 73256 73258 73261 73263 73267 73270 73274 73276 73284 73287 73289 73295 74973 75421 76447 79048 80011 85047 89364 89858 92282 94402 96346 97999 102113 103755 107155 108117 109513 110038 113155 113642 113831 116710 116753 117244 119630 120350 120846 122466 123730 123948 125345 126612 126783 128264 128982 130381 130935 131861 132541 133817 134698 134741 136138 137618 138140 139058 141176 141217 141743 141894 142661 143184 144054 144095 144101 145541 146066 146973 146981 148228 148421 149669 150572 151970 153451 153461 154712 154901 156874 157049 157061 157729 158316 159941 160477 160661 163344 163358 163540 164247 164785 164980 165519 166367 166420 166946 167847 167860 168388 170018 170550 170561 170738 172125 172165 172178 172712 173441 173617 174152 175776 176314 176443 177034 177042 178655 179363 179373 179918 179925 180093 181480 182079 182962 182973 183526 183693 184241 185796 185840 185852 186402 187127 188563 188569 189289 190006 190009 190880 190891 191450 191550 191611 192331 192887 192891 195050 195199 195928 196492 197368 197931 198023 198078 198088 198741 199372 199375 199516 200897 200965 201534 202404 202976 204564 205284 207296 207299 207435 207443 208163 208738 210263 210314 210898 210901 211043 212339 213194 213202 213863 214504 215220 216082 216665 217463 218101 218107 218828 220261 220269 220400 220981 221709 222551 222560 223869 225430 226031 227471 227590 227598 230352 231909 231916 233347 235463 235507 236236 236946 238395 239106 241265 241274 242594 242714 243423 244034 245582 245590 246192 246193 246912 247741 248349 248356 248469 249069 249789 250627 251229 251237 251338 252066 252743 252777 253398 254223 254838 254937 254942 255662 256278 257102 257718 257816 258438 259943 259974 260598 260700 261318 261413 262103 262133 263561 264198 264281 264293 265001 265017 266425 266450 267078 267161 270026 270041 270052 270054 270772 271490 271493 272118 272907 273548 273653 274348 274370 274989 275788 276438 276510 276530 277230 277244 277969 278593 278598 279392 280034 280038 280754 280756 280834 281476 281477 281478 282917 282918 283005 283638 284357 284358 285798 285876 287327 287956 289479 289485 290834 291645 292365 293089 293713 295873 295961 298130 302445 302452 303791 305332 305951 307492 308112 308113 308829 308929 310373 310983 310989 311699 312428 312534 313148 314587 315295 315305 315416 316025 316852 316856 318184 319737 320343 321178 321771 321898 323338 323941 324778 326220 326820 326940 327529 327656 327661 328259 329101 329821 329822 330418 330537 330542 331126 331262 331856 332697 334003 334015 334137 334143 335585 336175 336297 336882 336894 337018 337026 337738 338332 340492 340629 341198 342060 342789 343357 343370 344940 344951 345530 346236 346393 346969 347114 347673 348541 348555 349127 349995 352158 352726 354302 354319 355039 355605 355760 356480 357043 357922 358642 359202 359343 360803 362244 363684 364239 364385 367287 367838 368007 370146 370168 370716 371587 372873 373747 373771 375187 375211 376629 377192 377371 379510 379531 379532 380973 381671 383853 384384 384554 384573 386015 386735 387455 387980 389596 389616 391579 392496 393196 393216 395376 395895 396817 398239 398257 398772 398978 400418 401858 402368 403298 403807 404740 405460 406181 406885 406901 407404 408341 411221 411928 412441 412661 414101 414599 416758 418411 418421 419141 420572 421075 422515 423453 423462 424175 424674 424895 425624 426113 427553 427776 428504 429937 429944 432817 433545 434265 434985 436418 436426 440028 440740 442908 443628 445782 445788 445789 446509 447229 448669 449389 450109 450824 452270 452990 453431 454151 455151 455871 456310 456585 456591 458031 459471 459923 460191 461626 461633 462080 462354 462800 463074 464508 464514 464958 465955 467388 467395 467836 468828 468837 469275 469558 470989 470998 471433 471710 472430 472439 472871 473871 473879 474591 474599 475319 476031 476041 477907 478201 478610 478911 478921 480361 480769 480785 481073 481081 481801 482208 483241 483663 483955 483961 484681 485395 485401 486841 487261 487558 487561 488281 489718 489721 490441 490442 491159 491162 491577 492601 493322 493326 494044 494047 494456 496207 496211 496614 496933 499096 499493 500541 501981 501983 501988 502076 502085 502090 502370 502710 503432 503433 503542 503548 503559 503572 503582 503590 503595 503599 503600 503603 503605 503608 503611 503615 503620 503622 503625 503630 503633 503637 503641 503647 503651 503655 503659 503665 503669 503672 503674 503677 503681 503683 503690 503692 503695 503698 503703 503705 503709 503711 503712 503713 503808 504156 504157 504436 504437 504440 504442 504444 504449 504451 504455 504460 504463 504466 504471 504473 504477 504480 504484 504485 504488 504490 504492 504494 504528 505599 505934 505967 506322 506325 506655 507045 507046 507404 507405 508491 508844 509211 509214 509563 509935 509936 510283 510659 510660 510664 511003 512107 512829 512831 513554 513558 515001 515002 515005 515729 516457 516459 516463 516467 516471 516475 516479 516482 516490 516494 516499 516503 516508 516512 516517 516528 516533 516537 516542 516546 516550 516555 516559 516569 516573 516578 516584 516589 516594 516602 516616 516623 516628 516633 516638 516647 516651 516656 516660 516665 516669 516674 516684 516687 516691 516695 516699 516704 516712 516717 516722 516726 516732 516737 516743 516748 516754 516760 516768 516774 516781 516789 516794 516804 516812 516817 516822 516826 516831 518281 519004 519727 519730 519733 520456 521899 521900 522624 522625 523348 523349 524792 524793 524794 524796 525519 525521 525523 526247 527690 527694 527695 527696 527699 527700 527703 527704 527705 527708 527711 527712 527714 527717 527720 527726 527730 527734 527737 527739 527742 527744 527749 527751 527753 528476 529199 ];
L = superpixels(X,2975,'IsInputLab',true);
BW = lazysnapping(gaborX,L,foregroundInd,backgroundInd);

% Create masked image.
maskedImage = RGB;
maskedImage(repmat(~BW,[1 1 3])) = 0;
end

function gaborFeatures = createGaborFeatures(im)

if size(im,3) == 3
    im = prepLab(im);
end

im = im2single(im);

imageSize = size(im);
numRows = imageSize(1);
numCols = imageSize(2);

wavelengthMin = 4/sqrt(2);
wavelengthMax = hypot(numRows,numCols);
n = floor(log2(wavelengthMax/wavelengthMin));
wavelength = 2.^(0:(n-2)) * wavelengthMin;

deltaTheta = 45;
orientation = 0:deltaTheta:(180-deltaTheta);

g = gabor(wavelength,orientation);
gabormag = imgaborfilt(im(:,:,1),g);

for i = 1:length(g)
    sigma = 0.5*g(i).Wavelength;
    K = 3;
    gabormag(:,:,i) = imgaussfilt(gabormag(:,:,i),K*sigma);
end

% Increases liklihood that neighboring pixels/subregions are segmented together
X = 1:numCols;
Y = 1:numRows;
[X,Y] = meshgrid(X,Y);
featureSet = cat(3,gabormag,X);
featureSet = cat(3,featureSet,Y);
featureSet = reshape(featureSet,numRows*numCols,[]);

% Normalize feature set
featureSet = featureSet - mean(featureSet);
featureSet = featureSet ./ std(featureSet);

gaborFeatures = reshape(featureSet,[numRows,numCols,size(featureSet,2)]);

% Add color/intensity into feature set
gaborFeatures = cat(3,gaborFeatures,im);

end

function out = prepLab(in)

% Convert L*a*b* image to range [0,1]
out = in;
out(:,:,1) = in(:,:,1) / 100;  % L range is [0 100].
out(:,:,2) = (in(:,:,2) + 86.1827) / 184.4170;  % a* range is [-86.1827,98.2343].
out(:,:,3) = (in(:,:,3) + 107.8602) / 202.3382;  % b* range is [-107.8602,94.4780].

end
